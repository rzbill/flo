// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v5.29.3
// source: flo/v1/channels.proto

package flov1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateChannelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Namespace     string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Partitions    int32                  `protobuf:"varint,3,opt,name=partitions,proto3" json:"partitions,omitempty"` // default from server if zero
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateChannelRequest) Reset() {
	*x = CreateChannelRequest{}
	mi := &file_flo_v1_channels_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChannelRequest) ProtoMessage() {}

func (x *CreateChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flo_v1_channels_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChannelRequest.ProtoReflect.Descriptor instead.
func (*CreateChannelRequest) Descriptor() ([]byte, []int) {
	return file_flo_v1_channels_proto_rawDescGZIP(), []int{0}
}

func (x *CreateChannelRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CreateChannelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateChannelRequest) GetPartitions() int32 {
	if x != nil {
		return x.Partitions
	}
	return 0
}

type CreateChannelResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateChannelResponse) Reset() {
	*x = CreateChannelResponse{}
	mi := &file_flo_v1_channels_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChannelResponse) ProtoMessage() {}

func (x *CreateChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flo_v1_channels_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChannelResponse.ProtoReflect.Descriptor instead.
func (*CreateChannelResponse) Descriptor() ([]byte, []int) {
	return file_flo_v1_channels_proto_rawDescGZIP(), []int{1}
}

type PublishRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Namespace     string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Channel       string                 `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
	Payload       []byte                 `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	Headers       map[string]string      `protobuf:"bytes,4,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Key           string                 `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"` // for partitioning and idempotency, optional
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishRequest) Reset() {
	*x = PublishRequest{}
	mi := &file_flo_v1_channels_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishRequest) ProtoMessage() {}

func (x *PublishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flo_v1_channels_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishRequest.ProtoReflect.Descriptor instead.
func (*PublishRequest) Descriptor() ([]byte, []int) {
	return file_flo_v1_channels_proto_rawDescGZIP(), []int{2}
}

func (x *PublishRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *PublishRequest) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *PublishRequest) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *PublishRequest) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *PublishRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type PublishResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            []byte                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishResponse) Reset() {
	*x = PublishResponse{}
	mi := &file_flo_v1_channels_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishResponse) ProtoMessage() {}

func (x *PublishResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flo_v1_channels_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishResponse.ProtoReflect.Descriptor instead.
func (*PublishResponse) Descriptor() ([]byte, []int) {
	return file_flo_v1_channels_proto_rawDescGZIP(), []int{3}
}

func (x *PublishResponse) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type SubscribeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Namespace     string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Channel       string                 `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
	Group         string                 `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
	StartToken    []byte                 `protobuf:"bytes,4,opt,name=start_token,json=startToken,proto3" json:"start_token,omitempty"` // optional
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeRequest) Reset() {
	*x = SubscribeRequest{}
	mi := &file_flo_v1_channels_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest) ProtoMessage() {}

func (x *SubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flo_v1_channels_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return file_flo_v1_channels_proto_rawDescGZIP(), []int{4}
}

func (x *SubscribeRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *SubscribeRequest) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *SubscribeRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *SubscribeRequest) GetStartToken() []byte {
	if x != nil {
		return x.StartToken
	}
	return nil
}

type SubscribeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            []byte                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Payload       []byte                 `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	Headers       map[string]string      `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeResponse) Reset() {
	*x = SubscribeResponse{}
	mi := &file_flo_v1_channels_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeResponse) ProtoMessage() {}

func (x *SubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flo_v1_channels_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeResponse.ProtoReflect.Descriptor instead.
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return file_flo_v1_channels_proto_rawDescGZIP(), []int{5}
}

func (x *SubscribeResponse) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubscribeResponse) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *SubscribeResponse) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

type AckRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Namespace     string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Channel       string                 `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
	Group         string                 `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
	Id            []byte                 `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AckRequest) Reset() {
	*x = AckRequest{}
	mi := &file_flo_v1_channels_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckRequest) ProtoMessage() {}

func (x *AckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flo_v1_channels_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckRequest.ProtoReflect.Descriptor instead.
func (*AckRequest) Descriptor() ([]byte, []int) {
	return file_flo_v1_channels_proto_rawDescGZIP(), []int{6}
}

func (x *AckRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *AckRequest) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *AckRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *AckRequest) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type AckResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AckResponse) Reset() {
	*x = AckResponse{}
	mi := &file_flo_v1_channels_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckResponse) ProtoMessage() {}

func (x *AckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flo_v1_channels_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckResponse.ProtoReflect.Descriptor instead.
func (*AckResponse) Descriptor() ([]byte, []int) {
	return file_flo_v1_channels_proto_rawDescGZIP(), []int{7}
}

type NackRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Namespace     string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Channel       string                 `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
	Group         string                 `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
	Id            []byte                 `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NackRequest) Reset() {
	*x = NackRequest{}
	mi := &file_flo_v1_channels_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NackRequest) ProtoMessage() {}

func (x *NackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flo_v1_channels_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NackRequest.ProtoReflect.Descriptor instead.
func (*NackRequest) Descriptor() ([]byte, []int) {
	return file_flo_v1_channels_proto_rawDescGZIP(), []int{8}
}

func (x *NackRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *NackRequest) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *NackRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *NackRequest) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type NackResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NackResponse) Reset() {
	*x = NackResponse{}
	mi := &file_flo_v1_channels_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NackResponse) ProtoMessage() {}

func (x *NackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flo_v1_channels_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NackResponse.ProtoReflect.Descriptor instead.
func (*NackResponse) Descriptor() ([]byte, []int) {
	return file_flo_v1_channels_proto_rawDescGZIP(), []int{9}
}

var File_flo_v1_channels_proto protoreflect.FileDescriptor

const file_flo_v1_channels_proto_rawDesc = "" +
	"\n" +
	"\x15flo/v1/channels.proto\x12\x06flo.v1\"h\n" +
	"\x14CreateChannelRequest\x12\x1c\n" +
	"\tnamespace\x18\x01 \x01(\tR\tnamespace\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1e\n" +
	"\n" +
	"partitions\x18\x03 \x01(\x05R\n" +
	"partitions\"\x17\n" +
	"\x15CreateChannelResponse\"\xef\x01\n" +
	"\x0ePublishRequest\x12\x1c\n" +
	"\tnamespace\x18\x01 \x01(\tR\tnamespace\x12\x18\n" +
	"\achannel\x18\x02 \x01(\tR\achannel\x12\x18\n" +
	"\apayload\x18\x03 \x01(\fR\apayload\x12=\n" +
	"\aheaders\x18\x04 \x03(\v2#.flo.v1.PublishRequest.HeadersEntryR\aheaders\x12\x10\n" +
	"\x03key\x18\x05 \x01(\tR\x03key\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"!\n" +
	"\x0fPublishResponse\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\fR\x02id\"\x81\x01\n" +
	"\x10SubscribeRequest\x12\x1c\n" +
	"\tnamespace\x18\x01 \x01(\tR\tnamespace\x12\x18\n" +
	"\achannel\x18\x02 \x01(\tR\achannel\x12\x14\n" +
	"\x05group\x18\x03 \x01(\tR\x05group\x12\x1f\n" +
	"\vstart_token\x18\x04 \x01(\fR\n" +
	"startToken\"\xbb\x01\n" +
	"\x11SubscribeResponse\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\fR\x02id\x12\x18\n" +
	"\apayload\x18\x02 \x01(\fR\apayload\x12@\n" +
	"\aheaders\x18\x03 \x03(\v2&.flo.v1.SubscribeResponse.HeadersEntryR\aheaders\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"j\n" +
	"\n" +
	"AckRequest\x12\x1c\n" +
	"\tnamespace\x18\x01 \x01(\tR\tnamespace\x12\x18\n" +
	"\achannel\x18\x02 \x01(\tR\achannel\x12\x14\n" +
	"\x05group\x18\x03 \x01(\tR\x05group\x12\x0e\n" +
	"\x02id\x18\x04 \x01(\fR\x02id\"\r\n" +
	"\vAckResponse\"k\n" +
	"\vNackRequest\x12\x1c\n" +
	"\tnamespace\x18\x01 \x01(\tR\tnamespace\x12\x18\n" +
	"\achannel\x18\x02 \x01(\tR\achannel\x12\x14\n" +
	"\x05group\x18\x03 \x01(\tR\x05group\x12\x0e\n" +
	"\x02id\x18\x04 \x01(\fR\x02id\"\x0e\n" +
	"\fNackResponse2\xc2\x02\n" +
	"\x0fChannelsService\x12L\n" +
	"\rCreateChannel\x12\x1c.flo.v1.CreateChannelRequest\x1a\x1d.flo.v1.CreateChannelResponse\x12:\n" +
	"\aPublish\x12\x16.flo.v1.PublishRequest\x1a\x17.flo.v1.PublishResponse\x12B\n" +
	"\tSubscribe\x12\x18.flo.v1.SubscribeRequest\x1a\x19.flo.v1.SubscribeResponse0\x01\x12.\n" +
	"\x03Ack\x12\x12.flo.v1.AckRequest\x1a\x13.flo.v1.AckResponse\x121\n" +
	"\x04Nack\x12\x13.flo.v1.NackRequest\x1a\x14.flo.v1.NackResponseB1Z/github.com/rzbill/flo/proto/gen/go/flo/v1;flov1b\x06proto3"

var (
	file_flo_v1_channels_proto_rawDescOnce sync.Once
	file_flo_v1_channels_proto_rawDescData []byte
)

func file_flo_v1_channels_proto_rawDescGZIP() []byte {
	file_flo_v1_channels_proto_rawDescOnce.Do(func() {
		file_flo_v1_channels_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_flo_v1_channels_proto_rawDesc), len(file_flo_v1_channels_proto_rawDesc)))
	})
	return file_flo_v1_channels_proto_rawDescData
}

var file_flo_v1_channels_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_flo_v1_channels_proto_goTypes = []any{
	(*CreateChannelRequest)(nil),  // 0: flo.v1.CreateChannelRequest
	(*CreateChannelResponse)(nil), // 1: flo.v1.CreateChannelResponse
	(*PublishRequest)(nil),        // 2: flo.v1.PublishRequest
	(*PublishResponse)(nil),       // 3: flo.v1.PublishResponse
	(*SubscribeRequest)(nil),      // 4: flo.v1.SubscribeRequest
	(*SubscribeResponse)(nil),     // 5: flo.v1.SubscribeResponse
	(*AckRequest)(nil),            // 6: flo.v1.AckRequest
	(*AckResponse)(nil),           // 7: flo.v1.AckResponse
	(*NackRequest)(nil),           // 8: flo.v1.NackRequest
	(*NackResponse)(nil),          // 9: flo.v1.NackResponse
	nil,                           // 10: flo.v1.PublishRequest.HeadersEntry
	nil,                           // 11: flo.v1.SubscribeResponse.HeadersEntry
}
var file_flo_v1_channels_proto_depIdxs = []int32{
	10, // 0: flo.v1.PublishRequest.headers:type_name -> flo.v1.PublishRequest.HeadersEntry
	11, // 1: flo.v1.SubscribeResponse.headers:type_name -> flo.v1.SubscribeResponse.HeadersEntry
	0,  // 2: flo.v1.ChannelsService.CreateChannel:input_type -> flo.v1.CreateChannelRequest
	2,  // 3: flo.v1.ChannelsService.Publish:input_type -> flo.v1.PublishRequest
	4,  // 4: flo.v1.ChannelsService.Subscribe:input_type -> flo.v1.SubscribeRequest
	6,  // 5: flo.v1.ChannelsService.Ack:input_type -> flo.v1.AckRequest
	8,  // 6: flo.v1.ChannelsService.Nack:input_type -> flo.v1.NackRequest
	1,  // 7: flo.v1.ChannelsService.CreateChannel:output_type -> flo.v1.CreateChannelResponse
	3,  // 8: flo.v1.ChannelsService.Publish:output_type -> flo.v1.PublishResponse
	5,  // 9: flo.v1.ChannelsService.Subscribe:output_type -> flo.v1.SubscribeResponse
	7,  // 10: flo.v1.ChannelsService.Ack:output_type -> flo.v1.AckResponse
	9,  // 11: flo.v1.ChannelsService.Nack:output_type -> flo.v1.NackResponse
	7,  // [7:12] is the sub-list for method output_type
	2,  // [2:7] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_flo_v1_channels_proto_init() }
func file_flo_v1_channels_proto_init() {
	if File_flo_v1_channels_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_flo_v1_channels_proto_rawDesc), len(file_flo_v1_channels_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_flo_v1_channels_proto_goTypes,
		DependencyIndexes: file_flo_v1_channels_proto_depIdxs,
		MessageInfos:      file_flo_v1_channels_proto_msgTypes,
	}.Build()
	File_flo_v1_channels_proto = out.File
	file_flo_v1_channels_proto_goTypes = nil
	file_flo_v1_channels_proto_depIdxs = nil
}
