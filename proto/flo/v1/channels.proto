syntax = "proto3";

package flo.v1;

option go_package = "github.com/rzbill/flo/proto/gen/go/flo/v1;flov1";

// Channels provides a pub/sub facade over EventLog.
service ChannelsService {
  rpc CreateChannel(CreateChannelRequest) returns (CreateChannelResponse);
  rpc Publish(PublishRequest) returns (PublishResponse);
  rpc Subscribe(SubscribeRequest) returns (stream SubscribeResponse);
  rpc Ack(AckRequest) returns (AckResponse);
  rpc Nack(NackRequest) returns (NackResponse);
}

message CreateChannelRequest {
  string namespace = 1;
  string name = 2;
  int32 partitions = 3; // default from server if zero
}

message CreateChannelResponse {}

message PublishRequest {
  string namespace = 1;
  string channel = 2;
  bytes payload = 3;
  map<string, string> headers = 4;
  string key = 5; // for partitioning and idempotency, optional
}

message PublishResponse {
  bytes id = 1;
}

message SubscribeRequest {
  string namespace = 1;
  string channel = 2;
  string group = 3;
  bytes start_token = 4; // optional
}

message SubscribeResponse {
  bytes id = 1;
  bytes payload = 2;
  map<string, string> headers = 3;
}

message AckRequest {
  string namespace = 1;
  string channel = 2;
  string group = 3;
  bytes id = 4;
}

message AckResponse {}

message NackRequest {
  string namespace = 1;
  string channel = 2;
  string group = 3;
  bytes id = 4;
}

message NackResponse {}


